
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.20+70 (git sha1 6e907acf86d, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.
Reading /openlane/designs/gpio_control_block/runs/RUN_27/tmp/synthesis/1-sky130_fd_sc_hd__tt_025C_1v80.no_pg.lib as a blackbox

1. Executing Liberty frontend.
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/gpio_control_block/macro/verilog/gpio_logic_high.v
Parsing SystemVerilog input from `/openlane/designs/gpio_control_block/macro/verilog/gpio_logic_high.v' to AST representation.
Generating RTLIL representation for module `\gpio_logic_high'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /openlane/designs/gpio_control_block/src/defines.v
Parsing SystemVerilog input from `/openlane/designs/gpio_control_block/src/defines.v' to AST representation.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /openlane/designs/gpio_control_block/src/gpio_control_block.v
Parsing SystemVerilog input from `/openlane/designs/gpio_control_block/src/gpio_control_block.v' to AST representation.
Warning: Yosys has only limited support for tri-state logic at the moment. (/openlane/designs/gpio_control_block/src/gpio_control_block.v:228)
Generating RTLIL representation for module `\gpio_control_block'.
Successfully finished Verilog frontend.

5. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/gpio_control_block/runs/RUN_27/tmp/synthesis/hierarchy.dot'.
Dumping module gpio_control_block to page 1.
Warning: WIDTHLABEL \gpio_dm [0] 1
Warning: WIDTHLABEL \gpio_dm [2:1] 2

6. Executing HIERARCHY pass (managing design hierarchy).

6.1. Analyzing design hierarchy..
Top module:  \gpio_control_block

6.2. Analyzing design hierarchy..
Top module:  \gpio_control_block
Removed 0 unused modules.

7. Executing TRIBUF pass.

8. Executing SYNTH pass.

8.1. Executing HIERARCHY pass (managing design hierarchy).

8.1.1. Analyzing design hierarchy..
Top module:  \gpio_control_block

8.1.2. Analyzing design hierarchy..
Top module:  \gpio_control_block
Removed 0 unused modules.

8.2. Executing PROC pass (convert processes to netlists).

8.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:180$5 in module gpio_control_block.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:170$3 in module gpio_control_block.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:155$1 in module gpio_control_block.
Removed a total of 0 dead cases.

8.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 13 redundant assignments.
Promoted 0 assignments to connections.

8.2.4. Executing PROC_INIT pass (extract init attributes).

8.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \resetn in `\gpio_control_block.$proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:180$5'.
Found async reset \resetn in `\gpio_control_block.$proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:170$3'.
Found async reset \resetn in `\gpio_control_block.$proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:155$1'.

8.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

8.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\gpio_control_block.$proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:180$5'.
     1/11: $0\gpio_dm[2:0]
     2/11: $0\gpio_vtrip_sel[0:0]
     3/11: $0\gpio_slow_sel[0:0]
     4/11: $0\gpio_ana_pol[0:0]
     5/11: $0\gpio_ana_sel[0:0]
     6/11: $0\gpio_ana_en[0:0]
     7/11: $0\gpio_ib_mode_sel[0:0]
     8/11: $0\gpio_inenb[0:0]
     9/11: $0\gpio_holdover[0:0]
    10/11: $0\gpio_outenb[0:0]
    11/11: $0\mgmt_ena[0:0]
Creating decoders for process `\gpio_control_block.$proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:170$3'.
     1/1: $0\shift_register[12:0]
Creating decoders for process `\gpio_control_block.$proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:155$1'.
     1/1: $0\serial_data_out[0:0]

8.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

8.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\gpio_control_block.\mgmt_ena' using process `\gpio_control_block.$proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:180$5'.
Warning: Async reset value `\gpio_defaults [0]' is not constant!
  created $aldff cell `$procdff$21' with positive edge clock and negative level non-const reset.
Creating register for signal `\gpio_control_block.\gpio_holdover' using process `\gpio_control_block.$proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:180$5'.
Warning: Async reset value `\gpio_defaults [2]' is not constant!
  created $aldff cell `$procdff$22' with positive edge clock and negative level non-const reset.
Creating register for signal `\gpio_control_block.\gpio_slow_sel' using process `\gpio_control_block.$proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:180$5'.
Warning: Async reset value `\gpio_defaults [8]' is not constant!
  created $aldff cell `$procdff$23' with positive edge clock and negative level non-const reset.
Creating register for signal `\gpio_control_block.\gpio_vtrip_sel' using process `\gpio_control_block.$proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:180$5'.
Warning: Async reset value `\gpio_defaults [9]' is not constant!
  created $aldff cell `$procdff$24' with positive edge clock and negative level non-const reset.
Creating register for signal `\gpio_control_block.\gpio_inenb' using process `\gpio_control_block.$proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:180$5'.
Warning: Async reset value `\gpio_defaults [3]' is not constant!
  created $aldff cell `$procdff$25' with positive edge clock and negative level non-const reset.
Creating register for signal `\gpio_control_block.\gpio_ib_mode_sel' using process `\gpio_control_block.$proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:180$5'.
Warning: Async reset value `\gpio_defaults [4]' is not constant!
  created $aldff cell `$procdff$26' with positive edge clock and negative level non-const reset.
Creating register for signal `\gpio_control_block.\gpio_outenb' using process `\gpio_control_block.$proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:180$5'.
Warning: Async reset value `\gpio_defaults [1]' is not constant!
  created $aldff cell `$procdff$27' with positive edge clock and negative level non-const reset.
Creating register for signal `\gpio_control_block.\gpio_dm' using process `\gpio_control_block.$proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:180$5'.
Warning: Async reset value `\gpio_defaults [12:10]' is not constant!
  created $aldff cell `$procdff$28' with positive edge clock and negative level non-const reset.
Creating register for signal `\gpio_control_block.\gpio_ana_en' using process `\gpio_control_block.$proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:180$5'.
Warning: Async reset value `\gpio_defaults [5]' is not constant!
  created $aldff cell `$procdff$29' with positive edge clock and negative level non-const reset.
Creating register for signal `\gpio_control_block.\gpio_ana_sel' using process `\gpio_control_block.$proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:180$5'.
Warning: Async reset value `\gpio_defaults [6]' is not constant!
  created $aldff cell `$procdff$30' with positive edge clock and negative level non-const reset.
Creating register for signal `\gpio_control_block.\gpio_ana_pol' using process `\gpio_control_block.$proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:180$5'.
Warning: Async reset value `\gpio_defaults [7]' is not constant!
  created $aldff cell `$procdff$31' with positive edge clock and negative level non-const reset.
Creating register for signal `\gpio_control_block.\shift_register' using process `\gpio_control_block.$proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:170$3'.
  created $adff cell `$procdff$32' with positive edge clock and negative level reset.
Creating register for signal `\gpio_control_block.\serial_data_out' using process `\gpio_control_block.$proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:155$1'.
  created $adff cell `$procdff$33' with negative edge clock and negative level reset.

8.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

8.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `gpio_control_block.$proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:180$5'.
Removing empty process `gpio_control_block.$proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:170$3'.
Removing empty process `gpio_control_block.$proc$/openlane/designs/gpio_control_block/src/gpio_control_block.v:155$1'.
Cleaned up 0 empty switches.

8.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module gpio_control_block.
<suppressed ~7 debug messages>

8.3. Executing FLATTEN pass (flatten design).

8.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module gpio_control_block.

8.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gpio_control_block..
Removed 3 unused cells and 22 unused wires.
<suppressed ~4 debug messages>

8.6. Executing CHECK pass (checking for obvious problems).
Checking module gpio_control_block...
Found and reported 0 problems.

8.7. Executing OPT pass (performing simple optimizations).

8.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gpio_control_block.

8.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gpio_control_block'.
Removed a total of 0 cells.

8.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gpio_control_block..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

8.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gpio_control_block.
Performed a total of 0 changes.

8.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gpio_control_block'.
Removed a total of 0 cells.

8.7.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gpio_control_block..

8.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module gpio_control_block.

8.7.9. Finished OPT passes. (There is nothing left to do.)

8.8. Executing FSM pass (extract and optimize FSM).

8.8.1. Executing FSM_DETECT pass (finding FSMs in design).

8.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

8.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

8.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gpio_control_block..

8.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

8.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

8.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

8.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

8.9. Executing OPT pass (performing simple optimizations).

8.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gpio_control_block.

8.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gpio_control_block'.
Removed a total of 0 cells.

8.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gpio_control_block..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

8.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gpio_control_block.
Performed a total of 0 changes.

8.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gpio_control_block'.
Removed a total of 0 cells.

8.9.6. Executing OPT_DFF pass (perform DFF optimizations).

8.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gpio_control_block..

8.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module gpio_control_block.

8.9.9. Finished OPT passes. (There is nothing left to do.)

8.10. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell gpio_control_block.$eq$/openlane/designs/gpio_control_block/src/gpio_control_block.v:232$15 ($eq).

8.11. Executing PEEPOPT pass (run peephole optimizers).

8.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gpio_control_block..

8.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module gpio_control_block:
  created 0 $alu and 0 $macc cells.

8.14. Executing SHARE pass (SAT-based resource sharing).

8.15. Executing OPT pass (performing simple optimizations).

8.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gpio_control_block.

8.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gpio_control_block'.
Removed a total of 0 cells.

8.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gpio_control_block..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

8.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gpio_control_block.
Performed a total of 0 changes.

8.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gpio_control_block'.
Removed a total of 0 cells.

8.15.6. Executing OPT_DFF pass (perform DFF optimizations).

8.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gpio_control_block..

8.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module gpio_control_block.

8.15.9. Finished OPT passes. (There is nothing left to do.)

8.16. Executing MEMORY pass.

8.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

8.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

8.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

8.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

8.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

8.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gpio_control_block..

8.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

8.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

8.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gpio_control_block..

8.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

8.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gpio_control_block..

8.18. Executing OPT pass (performing simple optimizations).

8.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gpio_control_block.
<suppressed ~1 debug messages>

8.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gpio_control_block'.
Removed a total of 0 cells.

8.18.3. Executing OPT_DFF pass (perform DFF optimizations).

8.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gpio_control_block..

8.18.5. Finished fast OPT passes.

8.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

8.20. Executing OPT pass (performing simple optimizations).

8.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gpio_control_block.

8.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gpio_control_block'.
Removed a total of 0 cells.

8.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gpio_control_block..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

8.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gpio_control_block.
Performed a total of 0 changes.

8.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gpio_control_block'.
Removed a total of 0 cells.

8.20.6. Executing OPT_SHARE pass.

8.20.7. Executing OPT_DFF pass (perform DFF optimizations).

8.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gpio_control_block..

8.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module gpio_control_block.

8.20.10. Finished OPT passes. (There is nothing left to do.)

8.21. Executing TECHMAP pass (map to technology primitives).

8.21.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

8.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $tribuf.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $aldff.
Using extmapper simplemap for cells of type $adff.
No more expansions possible.
<suppressed ~95 debug messages>

8.22. Executing OPT pass (performing simple optimizations).

8.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gpio_control_block.
<suppressed ~3 debug messages>

8.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gpio_control_block'.
Removed a total of 0 cells.

8.22.3. Executing OPT_DFF pass (perform DFF optimizations).

8.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gpio_control_block..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

8.22.5. Finished fast OPT passes.

8.23. Executing ABC pass (technology mapping using ABC).

8.23.1. Extracting gate netlist of module `\gpio_control_block' to `<abc-temp-dir>/input.blif'..
Extracted 11 gates and 22 wires to a netlist network with 11 inputs and 4 outputs.

8.23.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.23.1.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               AND cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:               MUX cells:        4
ABC RESULTS:               NOT cells:        3
ABC RESULTS:        internal signals:        7
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        4
Removing temp directory.

8.24. Executing OPT pass (performing simple optimizations).

8.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gpio_control_block.
<suppressed ~2 debug messages>

8.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gpio_control_block'.
Removed a total of 0 cells.

8.24.3. Executing OPT_DFF pass (perform DFF optimizations).

8.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gpio_control_block..
Removed 1 unused cells and 23 unused wires.
<suppressed ~2 debug messages>

8.24.5. Finished fast OPT passes.

8.25. Executing HIERARCHY pass (managing design hierarchy).

8.25.1. Analyzing design hierarchy..
Top module:  \gpio_control_block

8.25.2. Analyzing design hierarchy..
Top module:  \gpio_control_block
Removed 0 unused modules.

8.26. Printing statistics.

=== gpio_control_block ===

   Number of wires:                 50
   Number of wire bits:             78
   Number of public wires:          43
   Number of public wire bits:      71
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 40
     $_ALDFF_PN_                    13
     $_ANDNOT_                       1
     $_AND_                          1
     $_DFF_NN0_                      1
     $_DFF_PN0_                     13
     $_MUX_                          4
     $_NOT_                          2
     $_ORNOT_                        1
     $_TBUF_                         1
     gpio_logic_high                 1
     sky130_fd_sc_hd__conb_1         1
     sky130_fd_sc_hd__einvp_8        1

8.27. Executing CHECK pass (checking for obvious problems).
Checking module gpio_control_block...
Found and reported 0 problems.
[INFO] applying mappings in /openlane/designs/gpio_control_block/yosys_mapping.v

9. Executing TECHMAP pass (map to technology primitives).

9.1. Executing Verilog-2005 frontend: /openlane/designs/gpio_control_block/yosys_mapping.v
Parsing Verilog input from `/openlane/designs/gpio_control_block/yosys_mapping.v' to AST representation.
Generating RTLIL representation for module `\$_ALDFF_PN_'.
Successfully finished Verilog frontend.

9.2. Continuing TECHMAP pass.
Using template \$_ALDFF_PN_ for cells of type $_ALDFF_PN_.
No more expansions possible.
<suppressed ~16 debug messages>

10. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/gpio_control_block/runs/RUN_27/tmp/synthesis/post_techmap.dot'.
Dumping module gpio_control_block to page 1.
Warning: WIDTHLABEL \gpio_defaults [12] 1
Warning: WIDTHLABEL \gpio_dm [2] 1
Warning: WIDTHLABEL \shift_register [12] 1
Warning: WIDTHLABEL \gpio_defaults [11] 1
Warning: WIDTHLABEL \gpio_dm [1] 1
Warning: WIDTHLABEL \shift_register [11] 1
Warning: WIDTHLABEL \gpio_defaults [7] 1
Warning: WIDTHLABEL \shift_register [7] 1
Warning: WIDTHLABEL \gpio_defaults [6] 1
Warning: WIDTHLABEL \shift_register [6] 1
Warning: WIDTHLABEL \gpio_defaults [5] 1
Warning: WIDTHLABEL \shift_register [5] 1
Warning: WIDTHLABEL \gpio_defaults [10] 1
Warning: WIDTHLABEL \gpio_dm [0] 1
Warning: WIDTHLABEL \shift_register [10] 1
Warning: WIDTHLABEL \gpio_defaults [1] 1
Warning: WIDTHLABEL \shift_register [1] 1
Warning: WIDTHLABEL \gpio_defaults [4] 1
Warning: WIDTHLABEL \shift_register [4] 1
Warning: WIDTHLABEL \gpio_defaults [3] 1
Warning: WIDTHLABEL \shift_register [3] 1
Warning: WIDTHLABEL \gpio_defaults [9] 1
Warning: WIDTHLABEL \shift_register [9] 1
Warning: WIDTHLABEL \gpio_defaults [8] 1
Warning: WIDTHLABEL \shift_register [8] 1
Warning: WIDTHLABEL \gpio_defaults [2] 1
Warning: WIDTHLABEL \shift_register [2] 1
Warning: WIDTHLABEL \gpio_defaults [0] 1
Warning: WIDTHLABEL \shift_register [0] 1
Warning: WIDTHLABEL \gpio_dm [0] 1
Warning: WIDTHLABEL \gpio_dm [2] 1
Warning: WIDTHLABEL \gpio_dm [1] 1
Warning: WIDTHLABEL \gpio_defaults [0] 1
Warning: WIDTHLABEL \gpio_defaults [2] 1
Warning: WIDTHLABEL \gpio_defaults [8] 1
Warning: WIDTHLABEL \gpio_defaults [9] 1
Warning: WIDTHLABEL \gpio_defaults [3] 1
Warning: WIDTHLABEL \gpio_defaults [4] 1
Warning: WIDTHLABEL \gpio_defaults [1] 1
Warning: WIDTHLABEL \gpio_defaults [10] 1
Warning: WIDTHLABEL \gpio_defaults [11] 1
Warning: WIDTHLABEL \gpio_defaults [12] 1
Warning: WIDTHLABEL \gpio_defaults [5] 1
Warning: WIDTHLABEL \gpio_defaults [6] 1
Warning: WIDTHLABEL \gpio_defaults [7] 1
Warning: WIDTHLABEL \shift_register [0] 1
Warning: WIDTHLABEL \shift_register [0] 1
Warning: WIDTHLABEL \shift_register [1] 1
Warning: WIDTHLABEL \shift_register [1] 1
Warning: WIDTHLABEL \shift_register [2] 1
Warning: WIDTHLABEL \shift_register [2] 1
Warning: WIDTHLABEL \shift_register [3] 1
Warning: WIDTHLABEL \shift_register [3] 1
Warning: WIDTHLABEL \shift_register [4] 1
Warning: WIDTHLABEL \shift_register [4] 1
Warning: WIDTHLABEL \shift_register [5] 1
Warning: WIDTHLABEL \shift_register [5] 1
Warning: WIDTHLABEL \shift_register [6] 1
Warning: WIDTHLABEL \shift_register [6] 1
Warning: WIDTHLABEL \shift_register [7] 1
Warning: WIDTHLABEL \shift_register [7] 1
Warning: WIDTHLABEL \shift_register [8] 1
Warning: WIDTHLABEL \shift_register [8] 1
Warning: WIDTHLABEL \shift_register [9] 1
Warning: WIDTHLABEL \shift_register [9] 1
Warning: WIDTHLABEL \shift_register [10] 1
Warning: WIDTHLABEL \shift_register [10] 1
Warning: WIDTHLABEL \shift_register [11] 1
Warning: WIDTHLABEL \shift_register [11] 1
Warning: WIDTHLABEL \shift_register [12] 1
Warning: WIDTHLABEL \shift_register [12] 1

11. Executing SHARE pass (SAT-based resource sharing).

12. Executing OPT pass (performing simple optimizations).

12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gpio_control_block.

12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gpio_control_block'.
<suppressed ~36 debug messages>
Removed a total of 12 cells.

12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gpio_control_block..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gpio_control_block.
Performed a total of 0 changes.

12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gpio_control_block'.
Removed a total of 0 cells.

12.6. Executing OPT_DFF pass (perform DFF optimizations).

12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gpio_control_block..
Removed 0 unused cells and 77 unused wires.
<suppressed ~1 debug messages>

12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module gpio_control_block.

12.9. Rerunning OPT passes. (Maybe there is more to do..)

12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gpio_control_block..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gpio_control_block.
Performed a total of 0 changes.

12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gpio_control_block'.
Removed a total of 0 cells.

12.13. Executing OPT_DFF pass (perform DFF optimizations).

12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gpio_control_block..

12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module gpio_control_block.

12.16. Finished OPT passes. (There is nothing left to do.)

13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gpio_control_block..
Removed 0 unused cells and 10 unused wires.
<suppressed ~10 debug messages>

14. Printing statistics.

=== gpio_control_block ===

   Number of wires:                 67
   Number of wire bits:             93
   Number of public wires:          33
   Number of public wire bits:      59
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 67
     $_ANDNOT_                       1
     $_AND_                          1
     $_DFFSR_PNN_                   13
     $_DFF_NN0_                      1
     $_DFF_PN0_                     13
     $_MUX_                          4
     $_NAND_                        13
     $_NOT_                          3
     $_ORNOT_                        1
     $_OR_                          13
     $_TBUF_                         1
     gpio_logic_high                 1
     sky130_fd_sc_hd__conb_1         1
     sky130_fd_sc_hd__einvp_8        1

mapping tbuf

15. Executing TECHMAP pass (map to technology primitives).

15.1. Executing Verilog-2005 frontend: /mnt/g/Efabless/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/mnt/g/Efabless/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

15.2. Continuing TECHMAP pass.
Using template \$_TBUF_ for cells of type $_TBUF_.
No more expansions possible.
<suppressed ~4 debug messages>

16. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping gpio_control_block.$techmap$auto$simplemap.cc:294:simplemap_tribuf$113.$not$/mnt/g/Efabless/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v:5$171 ($not).

17. Executing TECHMAP pass (map to technology primitives).

17.1. Executing Verilog-2005 frontend: /mnt/g/Efabless/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/mnt/g/Efabless/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

17.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

18. Executing SIMPLEMAP pass (map simple cells to gate primitives).

19. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

19.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\gpio_control_block':
  mapped 13 $_DFFSR_NNN_ cells to \sky130_fd_sc_hd__dfbbn_2 cells.
  mapped 14 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.

20. Printing statistics.

=== gpio_control_block ===

   Number of wires:                 99
   Number of wire bits:            125
   Number of public wires:          33
   Number of public wire bits:      59
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 82
     $_ANDNOT_                       1
     $_AND_                          1
     $_MUX_                          4
     $_NAND_                        13
     $_NOT_                         18
     $_ORNOT_                        1
     $_OR_                          13
     gpio_logic_high                 1
     sky130_fd_sc_hd__conb_1         1
     sky130_fd_sc_hd__dfbbn_2       13
     sky130_fd_sc_hd__dfrtp_2       14
     sky130_fd_sc_hd__ebufn_2        1
     sky130_fd_sc_hd__einvp_8        1

[INFO]: USING STRATEGY AREA 3

21. Executing ABC pass (technology mapping using ABC).

21.1. Extracting gate netlist of module `\gpio_control_block' to `/tmp/yosys-abc-1GgeEQ/input.blif'..
Extracted 51 gates and 79 wires to a netlist network with 28 inputs and 44 outputs.

21.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-1GgeEQ/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-1GgeEQ/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-1GgeEQ/input.blif 
ABC: + read_lib -w /openlane/designs/gpio_control_block/runs/RUN_27/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.07 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/gpio_control_block/runs/RUN_27/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.11 sec
ABC: Memory =    7.77 MB. Time =     0.11 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/gpio_control_block/runs/RUN_27/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/gpio_control_block/runs/RUN_27/tmp/synthesis/synthesis.sdc 
ABC: + strash 
ABC: + dch 
ABC: + map -B 0.9 
ABC: The cell delays are multiplied by the factor: <num_fanins> ^ (0.90).
ABC: + topo 
ABC: + stime -c 
ABC: WireLoad = "Small"  Gates =     57 ( 35.1 %)   Cap = 21.7 ff (  4.4 %)   Area =      320.31 ( 64.9 %)   Delay =   471.39 ps  ( 28.1 %)               
ABC: + buffer -c -N 10 
ABC: + upsize -c 
ABC: + dnsize -c 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     74 ( 50.0 %)   Cap = 18.5 ff ( 20.8 %)   Area =      504.23 ( 41.9 %)   Delay =   518.61 ps  ( 28.4 %)               
ABC: Path  0 --      13 : 0    5 pi                     A =   0.00  Df =  47.4  -26.6 ps  S =  71.5 ps  Cin =  0.0 ff  Cout =  14.2 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      90 : 1   10 sky130_fd_sc_hd__buf_6 A =  11.26  Df = 169.9  -26.8 ps  S =  62.6 ps  Cin =  4.6 ff  Cout =  25.5 ff  Cmax = 785.5 ff  G =  521  
ABC: Path  2 --      91 : 2    1 sky130_fd_sc_hd__or2_4 A =   8.76  Df = 381.6  -99.3 ps  S =  46.6 ps  Cin =  2.4 ff  Cout =   4.9 ff  Cmax = 514.5 ff  G =  193  
ABC: Path  3 --      92 : 1    1 sky130_fd_sc_hd__buf_6 A =  11.26  Df = 518.6 -116.5 ps  S =  77.4 ps  Cin =  4.6 ff  Cout =  33.4 ff  Cmax = 785.5 ff  G =  723  
ABC: Start-point = pi12 (\resetn).  End-point = po4 ($auto$ff.cc:266:slice$131.RN).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   28/   44  lat =    0  nd =    74  edge =    115  area =504.25  delay =371.15  lev = 5
ABC: + write_blif /tmp/yosys-abc-1GgeEQ/output.blif 

21.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__buf_4 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or2_4 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__buf_6 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__buf_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       18
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       20
ABC RESULTS:        internal signals:        7
ABC RESULTS:           input signals:       28
ABC RESULTS:          output signals:       44
Removing temp directory.

22. Executing SETUNDEF pass (replace undef values with defined constants).

23. Executing HILOMAP pass (mapping to constant drivers).

24. Executing SPLITNETS pass (splitting up multi-bit signals).

25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gpio_control_block..
Removed 0 unused cells and 83 unused wires.
<suppressed ~1 debug messages>

26. Executing INSBUF pass (insert buffer cells for connected wires).
Added gpio_control_block.$auto$insbuf.cc:79:execute$290: \resetn -> \resetn_out
Added gpio_control_block.$auto$insbuf.cc:79:execute$291: \serial_clock -> \serial_clock_out
Added gpio_control_block.$auto$insbuf.cc:79:execute$292: \serial_load -> \serial_load_out

27. Executing CHECK pass (checking for obvious problems).
Checking module gpio_control_block...
Found and reported 0 problems.

28. Printing statistics.

=== gpio_control_block ===

   Number of wires:                130
   Number of wire bits:            144
   Number of public wires:          45
   Number of public wire bits:      59
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                108
     gpio_logic_high                 1
     sky130_fd_sc_hd__a21o_2         1
     sky130_fd_sc_hd__and3_2         1
     sky130_fd_sc_hd__buf_2          7
     sky130_fd_sc_hd__buf_4          2
     sky130_fd_sc_hd__buf_6         11
     sky130_fd_sc_hd__conb_1         1
     sky130_fd_sc_hd__dfbbn_2       13
     sky130_fd_sc_hd__dfrtp_2       14
     sky130_fd_sc_hd__ebufn_2        1
     sky130_fd_sc_hd__einvp_8        1
     sky130_fd_sc_hd__inv_2         20
     sky130_fd_sc_hd__nand2_2       18
     sky130_fd_sc_hd__nand3_2        2
     sky130_fd_sc_hd__nor2_2         1
     sky130_fd_sc_hd__or2_2          3
     sky130_fd_sc_hd__or2_4         10
     sky130_fd_sc_hd__or2b_2         1

   Area for cell type \sky130_fd_sc_hd__einvp_8 is unknown!
   Area for cell type \gpio_logic_high is unknown!

   Chip area for module '\gpio_control_block': 1357.552000

29. Executing Verilog backend.

29.1. Executing BMUXMAP pass.

29.2. Executing DEMUXMAP pass.
Dumping module `\gpio_control_block'.

Warnings: 42 unique messages, 85 total
End of script. Logfile hash: 0b5257c62b, CPU: user 1.33s system 0.05s, MEM: 45.44 MB peak
Yosys 0.20+70 (git sha1 6e907acf86d, gcc 8.3.1 -fPIC -Os)
Time spent: 29% 2x read_liberty (0 sec), 20% 2x abc (0 sec), ...
